{"/home/travis/build/npmtest/node-npmtest-code/test.js":"/* istanbul instrument in package npmtest_code */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-code/lib.npmtest_code.js":"/* istanbul instrument in package npmtest_code */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_code = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_code = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-code/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-code && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_code */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_code\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_code.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_code.rollup.js'] =\n            local.assetsDict['/assets.npmtest_code.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_code.__dirname +\n                    '/lib.npmtest_code.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-code/node_modules/code/lib/index.js":"'use strict';\n\n// Load modules\n\nconst NodeUtil = require('util');\nconst Hoek = require('hoek');\n\n\n// Declare internals\n\nconst internals = {\n    flags: ['not', 'once', 'only', 'part', 'shallow'],\n    grammar: ['a', 'an', 'and', 'at', 'be', 'have', 'in', 'to'],\n    locations: {},\n    count: 0\n};\n\n\nexports.settings = {\n    truncateMessages: false,\n    comparePrototypes: false\n};\n\n\nexports.expect = function (value, prefix) {\n\n    const at = exports.thrownAt();\n    const location = at.filename + ':' + at.line + '.' + at.column;\n    internals.locations[location] = true;\n    ++internals.count;\n    return new internals.Assertion(value, prefix, location);\n};\n\n\nexports.fail = function (message) {\n\n    throw new Error(message);\n};\n\n\nexports.incomplete = function () {\n\n    const locations = Object.keys(internals.locations);\n    return locations.length ? locations : null;\n};\n\n\nexports.count = function () {\n\n    return internals.count;\n};\n\n\ninternals.Assertion = function (ref, prefix, location) {\n\n    this._ref = ref;\n    this._prefix = prefix || '';\n    this._location = location;\n    this._flags = {};\n};\n\n\ninternals.filterLocal = function (line) {\n\n    return line.indexOf(__dirname) === -1;\n};\n\n\ninternals.Assertion.prototype.assert = function (result, verb, actual, expected) {\n\n    delete internals.locations[this._location];\n\n    if (this._flags.not ? !result : result) {\n        this._flags = {};\n        return this;\n    }\n\n    if (verb === 'exist' &&\n        this._flags.not &&\n        this._ref instanceof Error) {\n\n        const original = this._ref;\n        original.at = exports.thrownAt();\n\n        throw original;\n    }\n\n    let message = '';\n\n    if (this._prefix) {\n        message += this._prefix + ': ';\n    }\n\n    message += 'Expected ' + internals.display(this._ref) + ' to ';\n\n    if (this._flags.not) {\n        message += 'not ';\n    }\n\n    message += verb;\n\n    if (this._flags.once) {\n        message += ' once';\n    }\n\n    if (arguments.length === 3) {           // 'actual' without 'expected'\n        message += ' but got ' + internals.display(actual);\n    }\n\n    const error = new Error(message);\n    Error.captureStackTrace(error, this.assert);\n    error.actual = actual;\n    error.expected = expected;\n    error.at = exports.thrownAt(error);\n    throw error;\n};\n\n\ninternals.flags.forEach((word) => {\n\n    Object.defineProperty(internals.Assertion.prototype, word, {\n        get: function () {\n\n            this._flags[word] = !this._flags[word];\n            return this;\n        },\n        configurable: true\n    });\n});\n\n\ninternals.grammar.forEach((word) => {\n\n    Object.defineProperty(internals.Assertion.prototype, word, {\n        get: function () {\n\n            return this;\n        },\n        configurable: true\n    });\n});\n\n\ninternals.addMethod = function (names, fn) {\n\n    const method = function (name) {\n\n        internals.Assertion.prototype[name] = fn;\n    };\n\n    names = [].concat(names);\n    names.forEach(method);\n};\n\n\n['arguments', 'array', 'boolean', 'buffer', 'date', 'function', 'number', 'regexp', 'string', 'object'].forEach((word) => {\n\n    const article = ['a', 'e', 'i', 'o', 'u'].indexOf(word[0]) !== -1 ? 'an ' : 'a ';\n    const method = function () {\n\n        const type = internals.type(this._ref);\n        return this.assert(type === word, 'be ' + article + word, type);\n    };\n\n    internals.addMethod(word, method);\n});\n\ninternals.addMethod('error', function (/*type, message*/) {\n\n    const type = arguments.length && typeof arguments[0] !== 'string' && !(arguments[0] instanceof RegExp) ? arguments[0] : Error;\n    const lastArg = arguments[1] || arguments[0];\n    const message = typeof lastArg === 'string' || lastArg instanceof RegExp ? lastArg : null;\n    const err = this._ref;\n\n    if (!this._flags.not || message === null) {\n        this.assert(err instanceof type, 'be an error with ' + (type.name || 'provided') + ' type');\n    }\n\n    if (message !== null) {\n        const error = err.message || '';\n        this.assert(typeof message === 'string' ? error === message : error.match(message), 'be an error with specified message', error, message);\n    }\n});\n\n\n[true, false, null, undefined].forEach((value) => {\n\n    const name = NodeUtil.inspect(value);\n    const method = function () {\n\n        return this.assert(this._ref === value, 'be ' + name);\n    };\n\n    internals.addMethod(name, method);\n});\n\n\ninternals.include = function (value) {\n\n    internals.assert(this, arguments.length === 1, 'Can only assert include with a single parameter');\n\n    this._flags.deep = !this._flags.shallow;\n    this._flags.part = this._flags.hasOwnProperty('part') ? this._flags.part : false;\n    return this.assert(Hoek.contain(this._ref, value, this._flags), 'include ' + internals.display(value));\n};\n\ninternals.addMethod(['include', 'includes', 'contain', 'contains'], internals.include);\n\n\ninternals.endWith = function (value) {\n\n    internals.assert(this, typeof this._ref === 'string' && typeof value === 'string', 'Can only assert endsWith on a string, with a string');\n\n    const comparator = this._ref.slice(-value.length);\n    return this.assert(comparator === value, 'endWith ' + internals.display(value));\n};\n\ninternals.addMethod(['endWith', 'endsWith'], internals.endWith);\n\n\ninternals.startWith = function (value) {\n\n    internals.assert(this, typeof this._ref === 'string' && typeof value === 'string', 'Can only assert startsWith on a string, with a string');\n\n    const comparator = this._ref.slice(0, value.length);\n    return this.assert(comparator === value, 'startWith ' + internals.display(value));\n};\n\ninternals.addMethod(['startWith', 'startsWith'], internals.startWith);\n\n\ninternals.exist = function () {\n\n    return this.assert(this._ref !== null && this._ref !== undefined, 'exist');\n};\n\ninternals.addMethod(['exist', 'exists'], internals.exist);\n\n\ninternals.empty = function () {\n\n    internals.assert(this, typeof this._ref === 'object' || typeof this._ref === 'string', 'Can only assert empty on object, array or string');\n\n    const length = this._ref.length !== undefined ? this._ref.length : Object.keys(this._ref).length;\n    return this.assert(!length, 'be empty');\n};\n\ninternals.addMethod('empty', internals.empty);\n\n\ninternals.length = function (size) {\n\n    internals.assert(this, typeof this._ref === 'object' || typeof this._ref === 'string', 'Can only assert empty on object, array or string');\n\n    const length = this._ref.length !== undefined ? this._ref.length : Object.keys(this._ref).length;\n    return this.assert(length === size, 'have a length of ' + size, length);\n};\n\ninternals.addMethod('length', internals.length);\n\n\ninternals.equal = function (value, options) {\n\n    options = options || {};\n    const settings = Hoek.applyToDefaults({ prototype: exports.settings.comparePrototypes }, options);\n\n    const compare = this._flags.shallow ? (a, b) => a === b\n                                        : (a, b) => Hoek.deepEqual(a, b, settings);\n\n    return this.assert(compare(this._ref, value), 'equal specified value', this._ref, value);\n};\n\ninternals.addMethod(['equal', 'equals'], internals.equal);\n\n\ninternals.above = function (value) {\n\n    return this.assert(this._ref > value, 'be above ' + value);\n};\n\ninternals.addMethod(['above', 'greaterThan'], internals.above);\n\n\ninternals.least = function (value) {\n\n    return this.assert(this._ref >= value, 'be at least ' + value);\n};\n\ninternals.addMethod(['least', 'min'], internals.least);\n\n\ninternals.below = function (value) {\n\n    return this.assert(this._ref < value, 'be below ' + value);\n};\n\ninternals.addMethod(['below', 'lessThan'], internals.below);\n\n\ninternals.most = function (value) {\n\n    return this.assert(this._ref <= value, 'be at most ' + value);\n};\n\ninternals.addMethod(['most', 'max'], internals.most);\n\n\ninternals.within = function (from, to) {\n\n    return this.assert(this._ref >= from && this._ref <= to, 'be within ' + from + '..' + to);\n};\n\ninternals.addMethod(['within', 'range'], internals.within);\n\n\ninternals.between = function (from, to) {\n\n    return this.assert(this._ref > from && this._ref < to, 'be between ' + from + '..' + to);\n};\n\ninternals.addMethod('between', internals.between);\n\n\ninternals.above = function (value, delta) {\n\n    internals.assert(this, internals.type(this._ref) === 'number', 'Can only assert about on numbers');\n    internals.assert(this, internals.type(value) === 'number' && internals.type(delta) === 'number', 'About assertion requires two number arguments');\n\n    return this.assert(Math.abs(this._ref - value) <= delta, 'be about ' + value + ' \\u00b1' + delta);\n};\n\ninternals.addMethod('about', internals.above);\n\n\ninternals.instanceof = function (type) {\n\n    return this.assert(this._ref instanceof type, 'be an instance of ' + (type.name || 'provided type'));\n};\n\ninternals.addMethod(['instanceof', 'instanceOf'], internals.instanceof);\n\n\ninternals.match = function (regex) {\n\n    return this.assert(regex.exec(this._ref), 'match ' + regex);\n};\n\ninternals.addMethod(['match', 'matches'], internals.match);\n\n\ninternals.satisfy = function (validator) {\n\n    return this.assert(validator(this._ref), 'satisfy rule');\n};\n\ninternals.addMethod(['satisfy', 'satisfies'], internals.satisfy);\n\n\ninternals.throw = function (/* type, message */) {\n\n    internals.assert(this, typeof this._ref === 'function', 'Can only assert throw on functions');\n    internals.assert(this, !this._flags.not || !arguments.length, 'Cannot specify arguments when expecting not to throw');\n\n    const type = arguments.length && typeof arguments[0] !== 'string' && !(arguments[0] instanceof RegExp) ? arguments[0] : null;\n    const lastArg = arguments[1] || arguments[0];\n    const message = typeof lastArg === 'string' || lastArg instanceof RegExp ? lastArg : null;\n\n    let thrown = false;\n\n    try {\n        this._ref();\n    }\n    catch (err) {\n        thrown = true;\n\n        if (type) {\n            this.assert(err instanceof type, 'throw ' + (type.name || 'provided type'));\n        }\n\n        if (message !== null) {\n            const error = err.message || '';\n            this.assert(typeof message === 'string' ? error === message : error.match(message), 'throw an error with specified message', error, message);\n        }\n\n        this.assert(thrown, 'throw an error', err);\n    }\n\n    return this.assert(thrown, 'throw an error');\n};\n\ninternals.addMethod(['throw', 'throws'], internals.throw);\n\n\ninternals.display = function (value) {\n\n    const string = value instanceof Error ? `[${value.toString()}]` :\n                                            NodeUtil.inspect(value);\n\n    if (!exports.settings.truncateMessages || string.length <= 40) {\n        return string;\n    }\n\n    if (Array.isArray(value)) {\n        return '[Array(' + value.length + ')]';\n    }\n\n    if (typeof value === 'object') {\n        const keys = Object.keys(value);\n        return '{ Object (' + (keys.length > 2 ? (keys.splice(0, 2).join(', ') + ', ...') : keys.join(', ')) + ') }';\n    }\n\n    return string.slice(0, 40) + '...\\'';\n};\n\n\ninternals.natives = {\n    '[object Arguments]': 'arguments',\n    '[object Array]': 'array',\n    '[object Date]': 'date',\n    '[object Function]': 'function',\n    '[object Number]': 'number',\n    '[object RegExp]': 'regexp',\n    '[object String]': 'string'\n};\n\n\ninternals.type = function (value) {\n\n    if (value === null) {\n        return 'null';\n    }\n\n    if (value === undefined) {\n        return 'undefined';\n    }\n\n    if (Buffer.isBuffer(value)) {\n        return 'buffer';\n    }\n\n    const name = Object.prototype.toString.call(value);\n    if (internals.natives[name]) {\n        return internals.natives[name];\n    }\n\n    if (value === Object(value)) {\n        return 'object';\n    }\n\n    return typeof value;\n};\n\n\nexports.thrownAt = function (error) {\n\n    error = error || new Error();\n    const stack = typeof error.stack === 'string' ? error.stack : '';\n    const frame = stack.replace(error.toString(), '').split('\\n').slice(1).filter(internals.filterLocal)[0] || '';\n    const at = frame.match(/^\\s*at \\(?(.+)\\:(\\d+)\\:(\\d+)\\)?$/);\n    return Array.isArray(at) ? {\n        filename: at[1],\n        line: at[2],\n        column: at[3]\n    } : undefined;\n};\n\n\ninternals.assert = function (assertion, condition, error) {\n\n    if (!condition) {\n        delete internals.locations[assertion._location];\n        Hoek.assert(condition, error);\n    }\n};\n"}